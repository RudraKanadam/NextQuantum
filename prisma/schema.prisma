generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  user
}

enum SubscriptionType {
  Basic
  Premium
  Teams
  Enterprise
}

enum Environment {
  UAT
  Dev
  Prod
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  password      String?
  role          UserRole       @default(user)
  accounts      Account[]
  subscription  Subscription?  @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?       @unique
  features      Feature[]      @relation("UserFeatures")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Subscription {
  id           String           @id @default(cuid())
  type         SubscriptionType @default(Basic)
  startDate    DateTime         @default(now())
  endDate      DateTime?
  user         User?

  features     Feature[]        @relation("SubscriptionFeatures")

  @@map("subscriptions")
}

model Feature {
  id               String          @id @default(cuid())
  name             String
  description      String?
  environment      Environment
  status           Boolean         @default(false)  // Column to track feature status
  subscriptionType SubscriptionType?
  subscriptionId   String?
  userId           String?

  subscription     Subscription?   @relation("SubscriptionFeatures", fields: [subscriptionId], references: [id])
  user             User?           @relation("UserFeatures", fields: [userId], references: [id])

  @@unique([name, environment])
  @@map("features")
}
