generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  user
}

enum SubscriptionType {
  Basic
  Premium
  Teams
  Enterprise
}

enum Environment {
  UAT
  Dev
  Prod
}

enum FeatureType {
  Global
  Subscription
  User
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  password      String?
  role          UserRole       @default(user)
  accounts      Account[]
  subscription  Subscription?  @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?       @unique
  userConditions UserCondition[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Subscription {
  id           String           @id @default(cuid())
  type         SubscriptionType @default(Basic)
  startDate    DateTime         @default(now())
  endDate      DateTime?
  user         User?
  subscriptionConditions SubscriptionCondition[]

  @@map("subscriptions")
}

model Feature {
  id          String         @id @default(cuid())
  name        String
  description String?
  status      Boolean        @default(false)  // Global activation state of the feature
  conditions  Condition[]

  @@map("features")
}

model Condition {
  id                     String                @id @default(cuid())
  featureId              String
  environment            Environment
  featureType            FeatureType
  status                 Boolean               @default(false)  // Condition-specific activation state
  feature                Feature               @relation(fields: [featureId], references: [id])

  userCondition          UserCondition?
  subscriptionCondition  SubscriptionCondition?

  @@map("featureConditions")
}

model UserCondition {
  id          String     @id @default(cuid())
  userId      String
  conditionId String     @unique
  user        User       @relation(fields: [userId], references: [id])
  condition   Condition  @relation(fields: [conditionId], references: [id], onDelete: Cascade)

  @@map("userFeatureConditions")
}

model SubscriptionCondition {
  id               String           @id @default(cuid())
  subscriptionId   String?
  subscriptionType SubscriptionType?
  conditionId      String           @unique
  subscription     Subscription?    @relation(fields: [subscriptionId], references: [id])
  condition        Condition        @relation(fields: [conditionId], references: [id], onDelete: Cascade)

  @@map("subscriptionFeatureConditions")
}
